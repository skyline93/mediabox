basePath: /
definitions:
  api.CreateAlbumRequest:
    properties:
      album_name:
        type: string
    required:
    - album_name
    type: object
  api.RegisterUserRequest:
    properties:
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  api.UserLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MediaBox API
  version: "1.0"
paths:
  /api/v1/albums:
    get:
      consumes:
      - application/json
      description: get albums
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get albums
      tags:
      - Albums
    post:
      consumes:
      - application/json
      description: create albums
      parameters:
      - description: album info
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/api.CreateAlbumRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create albums
      tags:
      - Albums
  /api/v1/photo:
    get:
      consumes:
      - application/json
      description: get photos
      parameters:
      - description: album id
        in: query
        name: album_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get photos
      tags:
      - Photos
  /api/v1/photo/import:
    post:
      consumes:
      - application/json
      description: import photo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      summary: Import photo
      tags:
      - Photos
  /api/v1/photo/upload:
    post:
      consumes:
      - application/json
      description: upload photo
      parameters:
      - description: album id
        in: formData
        name: album_id
        required: true
        type: integer
      - description: the file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
      summary: Upload photo
      tags:
      - Photos
  /delete/:username:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: User Name
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete user
      tags:
      - accounts
  /login:
    post:
      consumes:
      - application/json
      description: login user
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.UserLoginRequest'
      produces:
      - application/json
      responses: {}
      summary: Login user
      tags:
      - accounts
  /register:
    post:
      consumes:
      - application/json
      description: register user
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.RegisterUserRequest'
      produces:
      - application/json
      responses: {}
      summary: Register user
      tags:
      - accounts
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
